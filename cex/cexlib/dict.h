#pragma once
#include "_hashmap.h"
#include <cex/cex.h>
#include <string.h>

typedef struct hashmap dict_c;


// Hack for getting hash/cmp functions by a type of key field
// https://gustedt.wordpress.com/2015/05/11/the-controlling-expression-of-_generic/
// FIX: this is not compatible with MSVC
#define _dict$hashfunc(strucfield)                                                                 \
    _Generic(&(strucfield), u64 *: hm_int_hash, char(*)[]: hm_str_static_hash, char**: hm_str_hash)

#define _dict$cmpfunc(strucfield)                                                                  \
    _Generic(                                                                                      \
        &(strucfield),                                                                             \
        u64 *: hm_int_compare,                                                                     \
        char(*)[]: hm_str_static_compare,                                                          \
        char**: hm_str_compare                                                                     \
    )

#define dict$hashfunc(struct, field) _dict$hashfunc(((struct){ 0 }.field))
#define dict$cmpfunc(struct, field) _dict$cmpfunc(((struct){ 0 }.field))

#define dict$new(self, struct_type, key_field_name, allocator)                                     \
    dict.create(                                                                                   \
        self,                                                                                      \
        sizeof(struct_type),                                                                       \
        _Alignof(struct_type),                                                                     \
        offsetof(struct_type, key_field_name),                                                     \
        0, /* capacity = 0, default is 16 */                                                       \
        dict$hashfunc(struct_type, key_field_name),                                                \
        dict$cmpfunc(struct_type, key_field_name),                                                 \
        allocator,                                                                                 \
        NULL, /* elfree - function for clearing elements */                                                                                      \
        NULL  /* udata - passed as a context for cmp funcs */                                                                                     \
    )


struct __module__dict
{
    // Autogenerated by CEX
    // clang-format off

/**
 * @brief New dict() with u64 key
 *
 * @param item_size size of item strut
 * @param capacity dict capacity
 * @return dict malloc'ed pointer, or NULL on error
 */
dict_c*
(*create_u64)(size_t item_size, u32 capacity);

Exception
(*create)(dict_c** self, size_t item_size, size_t item_align, size_t item_key_offsetof, size_t capacity, u64 (*hash_func)(const void* item, u64 seed0, u64 seed1), i32 (*compare_func)(const void* a, const void* b, void* udata), const Allocator_c* allocator, void (*elfree)(void* item), void* udata);

/**
 * @brief New dict() with char[const N] key
 *
 * @param item_size size of item struct
 * @param capacity  initial capacity
 * @return  dict malloc'ed pointer or NULL
 */
dict_c*
(*create_str)(size_t item_size, u32 capacity);

/**
 * @brief Set or replace dict item
 *
 * @param self dict() instance
 * @param item  item key/value struct
 * @return error code, EOK (0!) on success, positive on failure
 */
Exception
(*set)(dict_c* self, const void* item);

/**
 * @brief Get item by integer key
 *
 * @param self dict() instance
 * @param key u64 key
 */
void*
(*geti)(dict_c* self, u64 key);

/**
 * @brief Get item by string key
 *
 * @param self dict_c instance
 * @param key string key
 */
void*
(*gets)(dict_c* self, const char* key);

/**
 * @brief Get item by generic key pointer
 *
 * @param self dict() instance
 * @param key generic pointer key
 */
void*
(*get)(dict_c* self, const void* key);

/**
 * @brief Number elements in dict()
 *
 * @param self  dict() instance
 * @return number
 */
size_t
(*len)(dict_c* self);

/**
 * @brief Free dict() instance
 *
 * @param self  dict() instance
 * @return always NULL
 */
dict_c*
(*destroy)(dict_c** self);

/**
 * @brief Clear all elements in dict (but allocated capacity unchanged)
 *
 * @param self dict() instane
 */
void
(*clear)(dict_c* self);

    // clang-format on
};
extern const struct __module__dict dict; // CEX Autogen
