#pragma once
#include <cex/cex.h>
#include <stdalign.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>


typedef struct
{
    alignas(64) const Allocator_i base;
    // below goes sanity check stuff
    u64 magic;
    struct
    {
        u32 n_allocs;
        u32 n_reallocs;
        u32 n_free;
        u32 n_fopen;
        u32 n_fclose;
        u32 n_open;
        u32 n_close;
    } stats;
} allocator_heap_s;
_Static_assert(sizeof(allocator_heap_s) == 128, "size!");
_Static_assert(offsetof(allocator_heap_s, base) == 0, "base must be the 1st struct member");

typedef struct
{
    alignas(64) const Allocator_i base;
    void* mem;
    void* next;
    void* max;
    // below goes sanity check stuff for debug builds
    u64 magic;
    struct
    {
        u32 n_allocs;
        u32 n_reallocs;
        u32 n_free;
        u32 n_fopen;
        u32 n_fclose;
        u32 n_open;
        u32 n_close;
    } stats;

} AllocatorStaticArena_c;
_Static_assert(sizeof(AllocatorStaticArena_c) == 192, "size!");
_Static_assert(offsetof(AllocatorStaticArena_c, base) == 0, "base must be the 1st struct member");

struct __module__allocators
{
    // Autogenerated by CEX
    // clang-format off


struct {  // sub-module .heap >>>
    /**
     * @brief  heap-based allocator (simple proxy for malloc/free/realloc)
     */
    const Allocator_i*
    (*create)(void);

    const Allocator_i*
    (*destroy)(void);

} heap;  // sub-module .heap <<<

struct {  // sub-module .staticarena >>>
    /**
     * @brief Static arena allocator (can be heap or stack arena)
     *
     * Static allocator should be created at the start of the application (maybe in main()),
     * and freed after app shutdown.
     *
     * Note: memory leaks are not caught by sanitizers, if you forget to call
     * allocators.staticarena.destroy() sanitizers will be silent.
     *
     * No realloc() supported by this arena!
     *
     * @param buffer - pointer to memory buffer
     * @param capacity - capacity of a buffer (minimal requires is 1024)
     * @return  allocator instance
     */
    const Allocator_i*
    (*create)(char* buffer, size_t capacity);

    const Allocator_i*
    (*destroy)(void);

} staticarena;  // sub-module .staticarena <<<
    // clang-format on
};
extern const struct __module__allocators allocators; // CEX Autogen
