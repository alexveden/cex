/**
 * Copyright (C) 2012-2015 Yecheng Fu <cofyc.jackson at gmail dot com>
 * All rights reserved.
 *
 * Use of this source code is governed by a MIT-style license that can be found
 * in the LICENSE file.
 */
#ifndef ARGPARSE_H
#define ARGPARSE_H

#include "cex.h"
#include <stdint.h>

struct argparse_c;
struct argparse_opt_s;

typedef Exception argparse_callback_f(struct argparse_c* self, const struct argparse_opt_s* option);


enum argparse_option_flags
{
    OPT_NONEG = 1, /* disable negation */
};
/**
 *  argparse option
 *
 *  `type`:
 *    holds the type of the option
 *
 *  `short_name`:
 *    the character to use as a short option name, '\0' if none.
 *
 *  `long_name`:
 *    the long option name, without the leading dash, NULL if none.
 *
 *  `value`:
 *    stores pointer to the value to be filled.
 *
 *  `help`:
 *    the short help message associated to what the option does.
 *    Must never be NULL (except for ARGPARSE_OPT_END).
 *
 *  `required`:
 *    if 'true' option presence is mandatory (default: false)
 *
 *
 *  `callback`:
 *    function is called when corresponding argument is parsed.
 *
 *  `data`:
 *    associated data. Callbacks can use it like they want.
 *
 *  `flags`:
 *    option flags.
 *
 *  `is_present`:
 *    true if option present in args
 */
typedef struct argparse_opt_s
{
    u8 type;
    const char short_name;
    const char* long_name;
    void* value;
    const char* help;
    bool required;
    argparse_callback_f* callback;
    intptr_t data;
    int flags;
    bool is_present; // also setting in in argparse$opt* macro, allows optional parameter sugar
} argparse_opt_s;

/**
 * argpparse
 */
typedef struct argparse_c
{
    // user supplied options
    argparse_opt_s* options;
    u32 options_len;

    const char* usage;        // usage text (can be multiline), each line prepended by program_name
    const char* description;  // a description after usage
    const char* epilog;       // a description at the end
    const char* program_name; // program name in usage (by default: argv[0])

    struct
    {
        u32 stop_at_non_option : 1;
        u32 ignore_unknown_args : 1;
    } flags;
    //
    //
    // internal context
    struct
    {
        int argc;
        char** argv;
        char** out;
        int cpidx;
        const char* optvalue; // current option value
        bool has_argument;
    } _ctx;
} argparse_c;


// built-in option macros
// clang-format off
#define argparse$opt_bool(...)    { 2 /*ARGPARSE_OPT_BOOLEAN*/, __VA_ARGS__, .is_present=0}
#define argparse$opt_bit(...)     { 3 /*ARGPARSE_OPT_BIT*/, __VA_ARGS__, .is_present=0 }
#define argparse$opt_integer(...) { 4 /*ARGPARSE_OPT_INTEGER*/, __VA_ARGS__, .is_present=0 }
#define argparse$opt_float(...)   { 5 /*ARGPARSE_OPT_FLOAT*/, __VA_ARGS__, .is_present=0 }
#define argparse$opt_string(...)  { 6 /*ARGPARSE_OPT_STRING*/, __VA_ARGS__, .is_present=0 }
#define argparse$opt_group(h)     { 1 /*ARGPARSE_OPT_GROUP*/, 0, NULL, NULL, h, false, NULL, 0, 0, .is_present=0 }
#define argparse$opt_help()       argparse$opt_bool('h', "help", NULL,                           \
                                                    "show this help message and exit", false,    \
                                                    NULL, 0, OPT_NONEG)
// clang-format on

struct __module__argparse
{
    // Autogenerated by CEX
    // clang-format off

void
(*usage)(argparse_c* self);

Exception
(*parse)(argparse_c* self, int argc, char** argv);

u32
(*argc)(argparse_c* self);

char**
(*argv)(argparse_c* self);

    // clang-format on
};
extern const struct __module__argparse argparse; // CEX Autogen
#endif
