#pragma once
#include <cex/cex.h>
#include <stdalign.h>
#include <stdint.h>
#include <string.h>

typedef struct
{
    char*  buf;
    size_t len;
} str_c;

_Static_assert(sizeof(str_c) == 16, "size");
_Static_assert(alignof(str_c) == 8, "size");

struct __module__str
{
    // Autogenerated by CEX
    // clang-format off

str_c
(*cstr)(const char* ccharptr);

str_c
(*cbuf)(char* s, size_t length);

str_c
(*sub)(str_c s, ssize_t start, ssize_t end);

Exception
(*copy)(str_c s, char* dest, size_t destlen);

size_t
(*length)(str_c s);

bool
(*is_valid)(str_c s);

char*
(*iter)(str_c s, cex_iterator_s* iterator);

ssize_t
(*indexof)(str_c s, str_c needle, size_t start, size_t end);

bool
(*contains)(str_c s, str_c needle);

bool
(*starts_with)(str_c s, str_c needle);

bool
(*ends_with)(str_c s, str_c needle);

str_c*
(*iter_split)(str_c s, const char split_by, cex_iterator_s* iterator);

    // clang-format on
};
extern const struct __module__str str; // CEX Autogen
struct __module__sview
{
    // Autogenerated by CEX
    // clang-format off

str_c
(*cstr)(const char* ccharptr);

str_c
(*cbuf)(char* s, size_t length);

str_c
(*sub)(str_c s, ssize_t start, ssize_t end);

Exception
(*copy)(str_c s, char* dest, size_t destlen);

size_t
(*length)(str_c s);

bool
(*is_valid)(str_c s);

char*
(*iter)(str_c s, cex_iterator_s* iterator);

ssize_t
(*indexof)(str_c s, str_c needle, size_t start, size_t end);

bool
(*contains)(str_c s, str_c needle);

bool
(*starts_with)(str_c s, str_c needle);

bool
(*ends_with)(str_c s, str_c needle);

str_c*
(*iter_split)(str_c s, const char split_by, cex_iterator_s* iterator);

    // clang-format on
};
extern const struct __module__sview sview; // CEX Autogen
