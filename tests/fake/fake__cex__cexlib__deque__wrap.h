// Autogenerated <fff.h> mocks
// NOTE: Do not edit, all changes can be lost

// clang-format off
#include <cex/cextest/fff.h>
#include <cex/cexlib/deque.h>

// IMPORTANT: wrapping works only with gcc  `-Wl,--wrap=Shmem_new,--wrap=Protocol_event_emitter_new`  flag
FAKE_VALUE_FUNC(Exc, __wrap_deque_validate, deque_c)Exception __real_deque_validate(deque_c);

FAKE_VALUE_FUNC(Exc, __wrap_deque_create, deque_c*, size_t, bool, size_t, size_t, const Allocator_c*)Exception __real_deque_create(deque_c*, size_t, bool, size_t, size_t, const Allocator_c*);

FAKE_VALUE_FUNC(Exc, __wrap_deque_create_static, deque_c*, void*, size_t, bool, size_t, size_t)Exception __real_deque_create_static(deque_c*, void*, size_t, bool, size_t, size_t);

FAKE_VALUE_FUNC(Exc, __wrap_deque_append, deque_c*, const void*)Exception __real_deque_append(deque_c*, const void*);

FAKE_VALUE_FUNC(Exc, __wrap_deque_enqueue, deque_c*, const void*)Exception __real_deque_enqueue(deque_c*, const void*);

FAKE_VALUE_FUNC(Exc, __wrap_deque_push, deque_c*, const void*)Exception __real_deque_push(deque_c*, const void*);

FAKE_VALUE_FUNC(void*, __wrap_deque_dequeue, deque_c*)void* __real_deque_dequeue(deque_c*);

FAKE_VALUE_FUNC(void*, __wrap_deque_pop, deque_c*)void* __real_deque_pop(deque_c*);

FAKE_VALUE_FUNC(void*, __wrap_deque_get, deque_c*, size_t)void* __real_deque_get(deque_c*, size_t);

FAKE_VALUE_FUNC(size_t, __wrap_deque_len, const deque_c*)size_t __real_deque_len(const deque_c*);

FAKE_VOID_FUNC(__wrap_deque_clear, deque_c*)void __real_deque_clear(deque_c*);

FAKE_VALUE_FUNC(void*, __wrap_deque_destroy, deque_c*)void* __real_deque_destroy(deque_c*);

FAKE_VALUE_FUNC(void*, __wrap_deque_iter_get, deque_c*, i32, cex_iterator_s*)void* __real_deque_iter_get(deque_c*, i32, cex_iterator_s*);

FAKE_VALUE_FUNC(void*, __wrap_deque_iter_fetch, deque_c*, i32, cex_iterator_s*)void* __real_deque_iter_fetch(deque_c*, i32, cex_iterator_s*);


const struct __module__deque deque = {
    // Autogenerated by CEX
    // clang-format off
    .validate = deque_validate,
    .create = deque_create,
    .create_static = deque_create_static,
    .append = deque_append,
    .enqueue = deque_enqueue,
    .push = deque_push,
    .dequeue = deque_dequeue,
    .pop = deque_pop,
    .get = deque_get,
    .len = deque_len,
    .clear = deque_clear,
    .destroy = deque_destroy,
    .iter_get = deque_iter_get,
    .iter_fetch = deque_iter_fetch,
    // clang-format on
};
// clang-format off


static void fake__cex__cexlib__deque__wrap__resetall(void) {
    RESET_FAKE(__wrap_deque_validate)
    RESET_FAKE(__wrap_deque_create)
    RESET_FAKE(__wrap_deque_create_static)
    RESET_FAKE(__wrap_deque_append)
    RESET_FAKE(__wrap_deque_enqueue)
    RESET_FAKE(__wrap_deque_push)
    RESET_FAKE(__wrap_deque_dequeue)
    RESET_FAKE(__wrap_deque_pop)
    RESET_FAKE(__wrap_deque_get)
    RESET_FAKE(__wrap_deque_len)
    RESET_FAKE(__wrap_deque_clear)
    RESET_FAKE(__wrap_deque_destroy)
    RESET_FAKE(__wrap_deque_iter_get)
    RESET_FAKE(__wrap_deque_iter_fetch)
}

