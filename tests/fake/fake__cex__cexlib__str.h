// Autogenerated <fff.h> mocks
// NOTE: Do not edit, all changes can be lost

// clang-format off
#include <cex/cextest/fff.h>
#include <cex/cexlib/sview.h>


FAKE_VALUE_FUNC(bool, _str__isvalid, const sview_c*)
FAKE_VALUE_FUNC(ssize_t, _str__index, sview_c*, char)
FAKE_VALUE_FUNC(sview_c, _sview_cstr, const char*)
FAKE_VALUE_FUNC(sview_c, _sview_cbuf, char*, size_t)
FAKE_VALUE_FUNC(sview_c, _str_sub, sview_c, ssize_t, ssize_t)
FAKE_VALUE_FUNC(Exc, _sview_copy, sview_c, char*, size_t)
FAKE_VALUE_FUNC(size_t, _str_length, sview_c)
FAKE_VALUE_FUNC(bool, _str_is_valid, sview_c)
FAKE_VALUE_FUNC(char*, _str_iter, sview_c, cex_iterator_s*)
FAKE_VALUE_FUNC(ssize_t, _str_indexof, sview_c, sview_c, size_t, size_t)
FAKE_VALUE_FUNC(bool, _sview_contains, sview_c, sview_c)
FAKE_VALUE_FUNC(bool, _str_starts_with, sview_c, sview_c)
FAKE_VALUE_FUNC(bool, _str_ends_with, sview_c, sview_c)
FAKE_VALUE_FUNC(sview_c*, _str_iter_split, sview_c, const char, cex_iterator_s*)

const struct __module__str str = {
    // Autogenerated by CEX
    // clang-format off
    .cstr = _sview_cstr,
    .cbuf = _sview_cbuf,
    .sub = _str_sub,
    .copy = _sview_copy,
    .length = _str_length,
    .is_valid = _str_is_valid,
    .iter = _str_iter,
    .indexof = _str_indexof,
    .contains = _sview_contains,
    .starts_with = _str_starts_with,
    .ends_with = _str_ends_with,
    .iter_split = _str_iter_split,
    // clang-format on
};
// clang-format off


static void fake__cex__cexlib__str__resetall(void) {
    RESET_FAKE(_str__isvalid)
    RESET_FAKE(_str__index)
    RESET_FAKE(_sview_cstr)
    RESET_FAKE(_sview_cbuf)
    RESET_FAKE(_str_sub)
    RESET_FAKE(_sview_copy)
    RESET_FAKE(_str_length)
    RESET_FAKE(_str_is_valid)
    RESET_FAKE(_str_iter)
    RESET_FAKE(_str_indexof)
    RESET_FAKE(_sview_contains)
    RESET_FAKE(_str_starts_with)
    RESET_FAKE(_str_ends_with)
    RESET_FAKE(_str_iter_split)
}

