// Autogenerated <fff.h> mocks
// NOTE: Do not edit, all changes can be lost

// clang-format off
#include <cex/cextest/fff.h>
#include <cex/cexlib/sview.h>

// IMPORTANT: wrapping works only with gcc  `-Wl,--wrap=Shmem_new,--wrap=Protocol_event_emitter_new`  flag
FAKE_VALUE_FUNC(bool, __wrap_sview__isvalid, const sview_c*)bool __real_sview__isvalid(const sview_c*);

FAKE_VALUE_FUNC(ssize_t, __wrap_sview__index, sview_c*, char)ssize_t __real_sview__index(sview_c*, char);

FAKE_VALUE_FUNC(sview_c, __wrap_sview_cstr, const char*)sview_c __real_sview_cstr(const char*);

FAKE_VALUE_FUNC(sview_c, __wrap_sview_cbuf, char*, size_t)sview_c __real_sview_cbuf(char*, size_t);

FAKE_VALUE_FUNC(sview_c, __wrap_sview_sub, sview_c, ssize_t, ssize_t)sview_c __real_sview_sub(sview_c, ssize_t, ssize_t);

FAKE_VALUE_FUNC(Exc, __wrap_sview_copy, sview_c, char*, size_t)Exception __real_sview_copy(sview_c, char*, size_t);

FAKE_VALUE_FUNC(size_t, __wrap_sview_length, sview_c)size_t __real_sview_length(sview_c);

FAKE_VALUE_FUNC(bool, __wrap_sview_is_valid, sview_c)bool __real_sview_is_valid(sview_c);

FAKE_VALUE_FUNC(char*, __wrap_sview_iter, sview_c, cex_iterator_s*)char* __real_sview_iter(sview_c, cex_iterator_s*);

FAKE_VALUE_FUNC(ssize_t, __wrap_sview_indexof, sview_c, sview_c, size_t, size_t)ssize_t __real_sview_indexof(sview_c, sview_c, size_t, size_t);

FAKE_VALUE_FUNC(bool, __wrap_sview_contains, sview_c, sview_c)bool __real_sview_contains(sview_c, sview_c);

FAKE_VALUE_FUNC(bool, __wrap_sview_starts_with, sview_c, sview_c)bool __real_sview_starts_with(sview_c, sview_c);

FAKE_VALUE_FUNC(bool, __wrap_sview_ends_with, sview_c, sview_c)bool __real_sview_ends_with(sview_c, sview_c);

FAKE_VALUE_FUNC(sview_c*, __wrap_sview_iter_split, sview_c, const char, cex_iterator_s*)sview_c* __real_sview_iter_split(sview_c, const char, cex_iterator_s*);


const struct __module__sview sview = {
    // Autogenerated by CEX
    // clang-format off
    .cstr = sview_cstr,
    .cbuf = sview_cbuf,
    .sub = sview_sub,
    .copy = sview_copy,
    .length = sview_length,
    .is_valid = sview_is_valid,
    .iter = sview_iter,
    .indexof = sview_indexof,
    .contains = sview_contains,
    .starts_with = sview_starts_with,
    .ends_with = sview_ends_with,
    .iter_split = sview_iter_split,
    // clang-format on
};
// clang-format off


static void fake__cex__cexlib__sview__wrap__resetall(void) {
    RESET_FAKE(__wrap_sview__isvalid)
    RESET_FAKE(__wrap_sview__index)
    RESET_FAKE(__wrap_sview_cstr)
    RESET_FAKE(__wrap_sview_cbuf)
    RESET_FAKE(__wrap_sview_sub)
    RESET_FAKE(__wrap_sview_copy)
    RESET_FAKE(__wrap_sview_length)
    RESET_FAKE(__wrap_sview_is_valid)
    RESET_FAKE(__wrap_sview_iter)
    RESET_FAKE(__wrap_sview_indexof)
    RESET_FAKE(__wrap_sview_contains)
    RESET_FAKE(__wrap_sview_starts_with)
    RESET_FAKE(__wrap_sview_ends_with)
    RESET_FAKE(__wrap_sview_iter_split)
}

