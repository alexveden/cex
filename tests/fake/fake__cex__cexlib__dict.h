// Autogenerated <fff.h> mocks
// NOTE: Do not edit, all changes can be lost

// clang-format off
#include <cex/cextest/fff.h>
#include <cex/cexlib/dict.h>


FAKE_VALUE_FUNC(u64, hm_int_hash_simple, u64)
FAKE_VALUE_FUNC(int, hm_int_compare, const void*, const void*, void*)
FAKE_VALUE_FUNC(u64, hm_int_hash, const void*, u64, u64)
FAKE_VALUE_FUNC(int, hm_str_static_compare, const void*, const void*, void*)
FAKE_VALUE_FUNC(u64, hm_str_static_hash, const void*, u64, u64)
FAKE_VALUE_FUNC(Exc, dict_create, dict_c*, size_t, size_t, size_t, size_t, dict_hash_func_f, dict_compare_func_f, const Allocator_c*, dict_elfree_func_f, void*)
FAKE_VALUE_FUNC(Exc, dict_set, dict_c*, const void*)
FAKE_VALUE_FUNC(void*, dict_geti, dict_c*, u64)
FAKE_VALUE_FUNC(void*, dict_get, dict_c*, const void*)
FAKE_VALUE_FUNC(size_t, dict_len, dict_c*)
FAKE_VOID_FUNC(dict_destroy, dict_c*)
FAKE_VOID_FUNC(dict_clear, dict_c*)
FAKE_VALUE_FUNC(void*, dict_deli, dict_c*, u64)
FAKE_VALUE_FUNC(void*, dict_del, dict_c*, const void*)
FAKE_VALUE_FUNC(void*, dict_iter, dict_c*, cex_iterator_s*)
FAKE_VALUE_FUNC(Exc, dict_tolist, dict_c*, void*, const Allocator_c*)

const struct __module__dict dict = {
    // Autogenerated by CEX
    // clang-format off
    .create = dict_create,
    .set = dict_set,
    .geti = dict_geti,
    .get = dict_get,
    .len = dict_len,
    .destroy = dict_destroy,
    .clear = dict_clear,
    .deli = dict_deli,
    .del = dict_del,
    .iter = dict_iter,
    .tolist = dict_tolist,
    // clang-format on
};
// clang-format off


static void fake__cex__cexlib__dict__resetall(void) {
    RESET_FAKE(hm_int_hash_simple)
    RESET_FAKE(hm_int_compare)
    RESET_FAKE(hm_int_hash)
    RESET_FAKE(hm_str_static_compare)
    RESET_FAKE(hm_str_static_hash)
    RESET_FAKE(dict_create)
    RESET_FAKE(dict_set)
    RESET_FAKE(dict_geti)
    RESET_FAKE(dict_get)
    RESET_FAKE(dict_len)
    RESET_FAKE(dict_destroy)
    RESET_FAKE(dict_clear)
    RESET_FAKE(dict_deli)
    RESET_FAKE(dict_del)
    RESET_FAKE(dict_iter)
    RESET_FAKE(dict_tolist)
}

